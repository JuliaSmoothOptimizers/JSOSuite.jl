var documenterSearchIndex = {"docs":
[{"location":"nls/#nls-section","page":"Nonlinear Least Squares","title":"Nonlinear Least Squares","text":"","category":"section"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [JSOSuite]","category":"page"},{"location":"reference/#JSOSuite.solvers","page":"Reference","title":"JSOSuite.solvers","text":"solvers\n\nDataFrame with the JSO-compliant solvers and their properties.\n\nFor each solver, the following are available:\n\nname::String: name of the solver;\nname_solver::Symbol: name of the solver structure for in-place solve, :not_implemented if not implemented;\nsolve_function::Symbol: name of the function;\nis_available::Bool: true if the solver is available;\nbounds::Bool: true if the solver can handle bound constraints;\nequalities::Bool: true if the solver can handle equality constraints;\ninequalities::Bool: true if the solver can handle inequality constraints;\nspecialized_nls::Bool: true if the solver has a specialized variant for nonlinear least squares;\ncan_solve_nlp::Bool: true if the solver can solve general problems. Some may only solve nonlinear least squares;\nnonlinear_obj::Bool: true if the solver can handle nonlinear objective;\nnonlinear_con::Bool: true if the solver can handle nonlinear constraints;\nhighest_derivative::Int: order of the highest derivative used by the algorithm.\n\n\n\n\n\n","category":"constant"},{"location":"reference/#JSOSuite.select_solvers","page":"Reference","title":"JSOSuite.select_solvers","text":"select_solvers(nlp::AbstractNLPModel, verbose = 1, highest_derivative_available::Integer = 2)\n\nNarrow the list of solvers to solve nlp problem using highest_derivative_available.\n\nThis function checks whether the model has:\n\nlinear or nonlinear constraints;\nunconstrained, bound constraints, equality constraints, inequality constraints;\nnonlinear or quadratic objective.\n\nA linear or quadratic objective is detected if the type of nlp is a QuadraticModel or an LLSModel. The selection between a general optimization problem and a nonlinear least squares is done in solve.\n\nIf no solvers were selected, consider setting verbose to true to see what went wrong.\n\nOutput\n\nselected_solvers::DataFrame: A subset of solvers adapted to the problem nlp.\n\nSee also solve.\n\nExamples\n\nusing ADNLPModels, JSOSuite\nnlp = ADNLPModel(x -> 100 * (x[2] - x[1]^2)^2 + (x[1] - 1)^2, [-1.2; 1.0])\nselected_solvers = JSOSuite.select_solvers(nlp)\nprint(selected_solvers[!, :name])\n\n\n\n\n\n","category":"function"},{"location":"reference/#JSOSuite.solve","page":"Reference","title":"JSOSuite.solve","text":"stats = solve(nlp::Union{AbstractNLPModel, JuMP.Model}; kwargs...)\nstats = solve(nlp::Union{AbstractNLPModel, JuMP.Model}, solver_name::Symbol; kwargs...)\n\nCompute a local minimum of the optimization problem nlp.\n\nJuMP.Model are converted in NLPModels via NLPModelsJuMP.jl.\n\nIf your optimization problem has a quadratic or linear objective and linear constraints consider using QuadraticModels.jl or LLSModels.jl for the model definition.\n\nKeyword Arguments\n\nAll the keyword arguments are passed to the selected solver. Keywords available for all the solvers are given below:\n\natol: absolute tolerance;\nrtol: relative tolerance;\nmax_time: maximum number of seconds;\nmax_eval: maximum number of cons + obj evaluations;\nverbose::Int = 0: if > 0, display iteration details every verbose iteration.\n\nFurther possible options are documented in each solver's documentation.\n\nOutput\n\nThe value returned is a GenericExecutionStats, see SolverCore.jl.\n\nExamples\n\nusing ADNLPModels, JSOSuite\nnlp = ADNLPModel(x -> 100 * (x[2] - x[1]^2)^2 + (x[1] - 1)^2, [-1.2; 1.0])\nstats = solve(nlp, verbose = 0)\nstats\n\nThe list of available solver can be obtained using JSOSuite.solvers[!, :name] or see select_solvers.\n\nusing ADNLPModels, JSOSuite\nnlp = ADNLPModel(x -> 100 * (x[2] - x[1]^2)^2 + (x[1] - 1)^2, [-1.2; 1.0])\nstats = solve(nlp, \"DCISolver\", verbose = 0)\nstats\n\n\n\n\n\n","category":"function"},{"location":"#JSOSuite.jl","page":"Home","title":"JSOSuite.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JSOSuite is a unique solution to access all the solvers available in the JuliaSmoothOptimizers organization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All these solvers rely on the NLPModel API from NLPModels.jl for general nonlinear optimization problems of the form","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nmin quad  f(x) \n c_L leq c(x) leq c_U \n c_A leq Ax leq l_A \n ell leq x leq u\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"The NLPModel API is a general consistent API for solvers to interact with models by providing flexible data types to represent the objective and constraint functions to evaluate their derivatives, and to provide essentially any information that a solver might request from a model. JuliaSmoothOrganization's website or NLPModels.jl's documentation provide more tutorials on this topic.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package JSOSuite exports a function solve: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"output = solve(nlpmodel; kwargs...)","category":"page"},{"location":"#NLPModel","page":"Home","title":"NLPModel","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JuliaSmoothOptimizers' compliant solvers accept any model compatible with the NLPModel API. See the Tutorial section for examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Depending on the origin of the problem several modeling tools are available. The following generic modeling tools are accepted:","category":"page"},{"location":"","page":"Home","title":"Home","text":"JuMP models are internally made compatible with NLPModel via NLPModelsJuMP.jl.\nAmpl models stored in a .nl file can AmplModel(\"name_of_file.nl\") using AmplNLReader.jl.\nQPSReader.jl reads linear problems in MPS format and quadratic problems in QPS format.\nModels using automatic differentiation can be generated using ADNLPModels.jl.\nModels with manually input derivatives can be defined using ManualNLPModels.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is also possible to define your NLPModel variant. Several examples are available within JuliaSmoothOptimizers umbrella:","category":"page"},{"location":"","page":"Home","title":"Home","text":"KnetNLPModels.jl: An NLPModels Interface to Knet.\nPDENLPModels.jl: A NLPModel API for optimization problems with PDE-constraints.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A nonlinear least squares problem is a special case with the objective function defined as  (f(x) = \\tfrac{1}{2}\\|F(x)\\|^2_2). Although the problem can be solved using only  (f), knowing  (F) independently allows the development of more efficient methods. See the Nonlinear Least Squares for special treatment of these problems.","category":"page"},{"location":"#Output","page":"Home","title":"Output","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The value returned is a GenericExecutionStats, which is a structure containing the available information at the end of the execution, such as a solver status, the objective function value, the norm of the residuals, the elapsed time, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It contains the following fields:","category":"page"},{"location":"","page":"Home","title":"Home","text":"status: Indicates the output of the solver. Use show_statuses() for the full list;\nsolution: The final approximation returned by the solver (default: an uninitialized vector like nlp.meta.x0);\nobjective: The objective value at solution (default: Inf);\ndual_feas: The dual feasibility norm at solution (default: Inf);\nprimal_feas: The primal feasibility norm at solution (default: 0.0 if unconstrained, Inf otherwise);\nmultipliers: The Lagrange multipliers wrt to the constraints (default: an uninitialized vector like nlp.meta.y0);\nmultipliers_L: The Lagrange multipliers wrt to the lower bounds on the variables (default: an uninitialized vector like nlp.meta.x0 if there are bounds, or a zero-length vector if not);\nmultipliers_U: The Lagrange multipliers wrt to the upper bounds on the variables (default: an uninitialized vector like nlp.meta.x0 if there are bounds, or a zero-length vector if not);\niter: The number of iterations computed by the solver (default: -1);\nelapsed_time: The elapsed time computed by the solver (default: Inf);\nsolver_specific::Dict{Symbol,Any}: A solver specific dictionary.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The list of statuses is available via the function SolverCore.show_statuses:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using SolverCore\nshow_statuses()","category":"page"},{"location":"#Keyword-Arguments","page":"Home","title":"Keyword Arguments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All the keyword arguments are passed to the selected solver. Keywords available for all the solvers are given below:","category":"page"},{"location":"","page":"Home","title":"Home","text":"atol: absolute tolerance;\nrtol: relative tolerance;\nmax_time: maximum number of seconds;\nmax_eval: maximum number of cons + obj evaluations;\nverbose::Int = 0: if > 0, display iteration details for every verbose iteration.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Further possible options are documented in each solver's documentation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"] add JSOSuite","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Bug-reports-and-discussions","page":"Home","title":"Bug reports and discussions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you want to ask a question not suited for a bug report, feel free to start a discussion here. This forum is for general discussion about this repository and the JuliaSmoothOptimizers, so questions about any of our packages are welcome.","category":"page"},{"location":"tutorial/#tutorial-section","page":"Tutorial","title":"Tutorial","text":"","category":"section"}]
}
